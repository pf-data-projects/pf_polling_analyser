"""
Boilerplate code for Iterative Proportional Fitting
generated by chatGPT. Currently only handles age and gender (not region or social grade).
"""

import pandas as pd

# Load the weight proportions and survey data
weight_proportions = pd.read_excel("/mnt/data/Weight_Proportions.xlsx")
survey_data = pd.read_excel("/mnt/data/Data.xlsx")

# Prepare the survey data
survey_subset = survey_data[["2: How old are you?", "3: Which of the following best describes how you think of yourself?"]]
survey_subset.columns = ["Age", "Gender"]
bins = [18, 24, 34, 44, 54, 64, 74, 84, 150]
labels = ["18-24", "25-34", "35-44", "45-54", "55-64", "65-74", "75-84", "85+"]
survey_subset["Age Group"] = pd.cut(survey_subset["Age"], bins=bins, labels=labels, right=True, include_lowest=True)
survey_subset["genderage"] = survey_subset["Gender"] + " " + survey_subset["Age Group"].astype(str)

def ipf(survey_data, weight_proportions, max_iterations=100, convergence_threshold=0.001):
    survey_data['weight'] = 1.0
    for iteration in range(max_iterations):
        previous_weights = survey_data['weight'].copy()
        for _, row in weight_proportions.iterrows():
            group, specific, target_prop = row['Group'], row['Specific'], row['Proportion']
            if group == "Overall":
                total_weight = survey_data['weight'].sum()
                scaling_factor = target_prop * len(survey_data) / total_weight
                survey_data['weight'] *= scaling_factor
            else:
                subset = survey_data[survey_data[group] == specific]
                current_prop = subset['weight'].sum() / survey_data['weight'].sum()
                scaling_factor = target_prop / current_prop
                survey_data.loc[survey_data[group] == specific, 'weight'] *= scaling_factor
        weight_change = (survey_data['weight'] - previous_weights).abs().sum()
        if weight_change < convergence_threshold:
            break
    return survey_data

# Filter out the 'region' and 'seg' groups from the weight proportions
filtered_weight_proportions = weight_proportions[~weight_proportions['Group'].isin(['region', 'seg'])]

# Apply IPF to the survey data
ipf_result = ipf(survey_subset, filtered_weight_proportions)
print(ipf_result[['Age', 'Gender', 'genderage', 'weight']].head())
